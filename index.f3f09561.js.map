{"mappings":"YAGA,IAAMA,EAASC,SAASC,cAAc,iBAEtCC,OAAOC,iBAAiB,UAAU,WAChCJ,EAAOK,UAAUF,OAAOG,QAAU,GAAK,MAAQ,UAAU,S,IAIvCL,SAASM,iBAAiB,iBAClCC,SAAQ,SAAAC,GAAaA,ECVpBL,iBAAiB,eAAe,SAAUM,GACnDA,EAAEC,2BAEF,IAAMC,EAAYX,SAASY,cAAc,OACzCD,EAAUP,UAAUS,IAAI,UAExBC,KAAKC,YAAYJ,GAEjB,IAAMK,EAAe,WACnBL,EAAUM,QACR,CACEC,QAAS,GAEX,CAAEC,KAAM,WAAYC,SAAU,MAEhCC,YAAW,WACTV,EAAUW,Q,GACT,I,EAQL,GALAR,KAAKX,iBAAiB,YAAaa,GACnCF,KAAKX,iBAAiB,eAAgBa,IAEhBF,KAAKV,UAAUmB,SAAS,YAE5B,CAChB,IAAMC,EAAaC,KAAKC,IAAIZ,KAAKa,YAAab,KAAKc,cAEnDjB,EAAUkB,MAAMC,IAAM,GAAYC,OAATtB,EAAEuB,OAAO,MAClCrB,EAAUkB,MAAMI,KAAO,GAAYF,OAATtB,EAAEyB,OAAO,MACnCvB,EAAUkB,MAAMM,MAAQ,GAAcJ,OAAXP,EAAW,MACtCb,EAAUkB,MAAMO,OAAS,GAAcL,OAAXP,EAAW,K,QChC7C,IAAMa,EAAOrC,SAASsC,gBAClBC,EAASrC,OAAOsC,WAAW,gCAAgCC,QAE3DC,aAAaC,QAAQ,SACvBN,EAAKO,QAAQC,MAAQH,aAAaC,QAAQ,SAE1CN,EAAKO,QAAQC,MAAQN,EAAS,OAAS,QAGzC,IAAMO,EAAc,WAClBP,EAASG,aAAaC,QAAQ,SAC9BD,aAAaK,QAAQ,QAAoB,UAAXR,EAAqB,OAAS,SAC5DF,EAAKO,QAAQC,MAAQH,aAAaC,QAAQ,Q,ECZrC,SAASK,EAAmBC,EAAUC,EAAWC,GACtDF,EAAS1C,SAAQ,SAAAC,G,OAAMA,EAAGL,iBAAiB+C,EAAWC,E,IDcxDjD,OAAOC,iBAAiB,QAAQ,WACbH,SAASC,cAAc,uBAC/BE,iBAAiB,QAAS2C,E,IEf9B,ICGDM,EAAiBpD,SAASM,iBAAiB,yBAC3C+C,EAAarD,SAASC,cAAc,sBAE1C+C,EAAmBI,EAAgB,SAAS,W,OAC1CC,EAAWjD,UAAUkD,OAAO,O,IAI9B,IAAMC,EAAcvD,SAASC,cAAc,uBACrCuD,EAAiBxD,SAASC,cAAc,2BAEpB,KAAtBsD,EAAYE,OACdD,EAAepD,UAAUS,IAAI,kBAG/B0C,EAAYpD,iBAAiB,SAAS,WACV,KAAtBoD,EAAYE,MACdD,EAAepD,UAAUS,IAAI,kBAE7B2C,EAAepD,UAAUkB,OAAO,iB,IAIpCkC,EAAerD,iBAAiB,SAAS,WACvCoD,EAAYE,MAAQ,GACpBD,EAAepD,UAAUS,IAAI,iB,IAI/B,IDhC2B6C,EAASP,EAC5BQ,EACFC,EC8BAC,EAAgB7D,SAASC,cAAc,2BACvC6D,EAAmBD,EAAc5D,cACrC,+BAEFC,OAAO6D,WAAaD,EAAiBlB,QAAQoB,aDpCTb,ECsCV,SAAAa,G,OAAiB9D,OAAO6D,WAAaC,C,EDrCvDL,GADmBD,ECsChBG,GDrCmBvD,iBAAiB,sBACzCsD,EAAyBF,EAAQzD,cACnC,+BAGF+C,EAAmBW,EAAa,SAAS,WACvCC,EAAuBxD,UAAUkB,OAAO,YACxCR,KAAKV,UAAUS,IAAI,YACnB+C,EAAyB9C,KACzBqC,EAASrC,KAAK8B,QAAQoB,a","sources":["js/global.js","js/ripple.js","js/theme.js","js/event.js","js/segment.js","js/search.js"],"sourcesContent":["import { ripple } from './ripple.js';\n\n// =========== Header on-scroll state =============\nconst header = document.querySelector('[data-header]');\n\nwindow.addEventListener('scroll', () => {\n  header.classList[window.scrollY > 50 ? 'add' : 'remove']('active');\n});\n\n// =========== Add ripple effect =============\nconst rippleElems = document.querySelectorAll('[data-ripple]');\nrippleElems.forEach(el => ripple(el));\n","export function ripple(rippleElem) {\n  rippleElem.addEventListener('pointerdown', function (e) {\n    e.stopImmediatePropagation();\n\n    const rippleBox = document.createElement('div');\n    rippleBox.classList.add('ripple');\n\n    this.appendChild(rippleBox);\n\n    const removeRipple = () => {\n      rippleBox.animate(\n        {\n          opacity: 0,\n        },\n        { fill: 'forwards', duration: 200 }\n      );\n      setTimeout(() => {\n        rippleBox.remove();\n      }, 1000);\n    };\n\n    this.addEventListener('pointerup', removeRipple);\n    this.addEventListener('pointerleave', removeRipple);\n\n    const isNotIconBtn = !this.classList.contains('icon-btn');\n\n    if (isNotIconBtn) {\n      const rippleSize = Math.max(this.clientWidth, this.clientHeight);\n\n      rippleBox.style.top = `${e.layerY}px`;\n      rippleBox.style.left = `${e.layerX}px`;\n      rippleBox.style.width = `${rippleSize}px`;\n      rippleBox.style.height = `${rippleSize}px`;\n    }\n  });\n}\n","const HTML = document.documentElement;\nlet isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n\nif (localStorage.getItem('theme')) {\n  HTML.dataset.theme = localStorage.getItem('theme');\n} else {\n  HTML.dataset.theme = isDark ? 'dark' : 'light';\n}\n\nconst changeTheme = () => {\n  isDark = localStorage.getItem('theme');\n  localStorage.setItem('theme', isDark === 'light' ? 'dark' : 'light');\n  HTML.dataset.theme = localStorage.getItem('theme');\n};\n\nwindow.addEventListener('load', () => {\n  const themeBtn = document.querySelector('[data-theme-toggler');\n  themeBtn.addEventListener('click', changeTheme);\n});\n","export function addEventOnElements(elements, eventType, callback) {\n  elements.forEach(el => el.addEventListener(eventType, callback));\n}\n","import { addEventOnElements } from './event';\n\nexport const getSegment = (segment, callback) => {\n  const segmentBtns = segment.querySelectorAll('[data-segment-btn]');\n  let lastSelectedSegmentBtn = segment.querySelector(\n    '[data-segment-btn].selected'\n  );\n\n  addEventOnElements(segmentBtns, 'click', function () {\n    lastSelectedSegmentBtn.classList.remove('selected');\n    this.classList.add('selected');\n    lastSelectedSegmentBtn = this;\n    callback(this.dataset.segmentValue);\n  });\n};\n","import { ripple } from './ripple.js';\nimport { addEventOnElements } from './event.js';\nimport { getSegment } from './segment.js';\n\n// =============== Search view toggle in small devices ================\nconst searchTogglers = document.querySelectorAll('[data-search-toggler]');\nconst searchView = document.querySelector('[data-search-view]');\n\naddEventOnElements(searchTogglers, 'click', () =>\n  searchView.classList.toggle('show')\n);\n\n// =========================== Search clean ===========================\nconst searchField = document.querySelector('[data-search-field]');\nconst searchClearBtn = document.querySelector('[data-search-clear-btn]');\n\nif (searchField.value === '') {\n  searchClearBtn.classList.add('clear-btn-none');\n}\n\nsearchField.addEventListener('input', () => {\n  if (searchField.value === '') {\n    searchClearBtn.classList.add('clear-btn-none');\n  } else {\n    searchClearBtn.classList.remove('clear-btn-none');\n  }\n});\n\nsearchClearBtn.addEventListener('click', () => {\n  searchField.value = '';\n  searchClearBtn.classList.add('clear-btn-none');\n});\n\n// =========================== Search type ===========================\nconst searchSegment = document.querySelector(\"[data-segment='search']\");\nconst activeSegmentBtn = searchSegment.querySelector(\n  '[data-segment-btn].selected'\n);\nwindow.searchType = activeSegmentBtn.dataset.segmentValue;\n\ngetSegment(searchSegment, segmentValue => (window.searchType = segmentValue));\n"],"names":["$d7717e80dd031d12$var$header","document","querySelector","window","addEventListener","classList","scrollY","querySelectorAll","forEach","el","e","stopImmediatePropagation","rippleBox","createElement","add","this","appendChild","removeRipple","animate","opacity","fill","duration","setTimeout","remove","contains","rippleSize","Math","max","clientWidth","clientHeight","style","top","concat","layerY","left","layerX","width","height","$93bd37e9dbd0199f$var$HTML","documentElement","$93bd37e9dbd0199f$var$isDark","matchMedia","matches","localStorage","getItem","dataset","theme","$93bd37e9dbd0199f$var$changeTheme","setItem","$cfa0aa41e1854782$export$90c1af92452b6943","elements","eventType","callback","$175e8d25f8b8edab$var$searchTogglers","$175e8d25f8b8edab$var$searchView","toggle","$175e8d25f8b8edab$var$searchField","$175e8d25f8b8edab$var$searchClearBtn","value","segment","segmentBtns","lastSelectedSegmentBtn","$175e8d25f8b8edab$var$searchSegment","$175e8d25f8b8edab$var$activeSegmentBtn","searchType","segmentValue"],"version":3,"file":"index.f3f09561.js.map"}